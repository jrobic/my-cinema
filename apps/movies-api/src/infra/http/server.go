package httpserver

import (
	"log"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/compress"
	"github.com/gofiber/fiber/v2/middleware/etag"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/gofiber/swagger"

	_ "github.com/jrobic/my-cinema/movies-api/src/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/jrobic/my-cinema/movies-api/src/domain"
	"github.com/jrobic/my-cinema/movies-api/src/usecase"
)

type MoviesAPIHttpServer struct {
	App      *fiber.App
	usecases usecase.Usecases
}

type MoviesAPIHttpServerDeps struct {
	MoviesRepo domain.MovieRepository
}

func NewMoviesAPIHttpServer(deps MoviesAPIHttpServerDeps) (*MoviesAPIHttpServer, error) {
	app := fiber.New()

	app.Use(Timer())

	app.Use(requestid.New())
	app.Use(compress.New())
	app.Use(etag.New())
	app.Use(logger.New())

	server := &MoviesAPIHttpServer{
		App:      app,
		usecases: usecase.NewAppUsecases(deps.MoviesRepo),
	}

	server.RegisterRoutes()

	return server, nil
}

func (s *MoviesAPIHttpServer) RegisterRoutes() {
	// Swagger
	s.App.Get("/swagger/*", swagger.HandlerDefault)

	s.App.Get("/health", s.Health)

	s.App.Get("/movies/ingest", s.IngestMoviesFile)
	s.App.Get("/movies", s.FetchAll)
}

// Cleanup after receive a graceful shutdown signal
func (s *MoviesAPIHttpServer) Cleanup() error {
	s.App.Shutdown()

	log.Println("Cleanup")

	return nil
}
